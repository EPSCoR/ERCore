<?php
define('ER_DEBUG_EXCEL', 0); //Change this to True (1) in order to debug the excel downloads.

define('ER_ADMIN_PERMISSION','administer er');
define('ER_ACCESS_PERMISSION','access er content');
define('ER_DOWNLOAD_PERMISSION','download er content');

define('ER_ROOT_NAME', 'reporting');//The name used in the URI

// Brent's comment: testing git workflow...

//Start date of the grant, currently used in the accomplishments table (summary.inc).
//DEPRECATED:: Use variable_get('er_start_date') instead.
//define('ER_START_DATE', mktime(0, 0, 0, 9, 15, 2009));

define('ER_MODULE_DIR', drupal_get_path('module', 'er'));
define('ER_INSTALL_DIR', ER_MODULE_DIR . '/install');

require_once ER_MODULE_DIR . '/includes/form_logic.inc';
require_once ER_MODULE_DIR . '/includes/node_logic.inc';
require_once ER_MODULE_DIR . '/includes/theme.inc';
require_once ER_MODULE_DIR . '/includes/views.inc';
require_once ER_MODULE_DIR . '/includes/blocks.inc';

//We should probably only load this when it is necessary:
require_once ER_MODULE_DIR . '/includes/er.install.inc';


//This handles the accomplishments table...
require_once ER_MODULE_DIR . '/includes/accomplishments.inc';

//IMPORTANT NOTE FROM module_load_include DOCUMENTATION:
//Do not use this function in a global context since it requires Drupal to be fully bootstrapped,
// use require_once DRUPAL_ROOT . '/path/file' instead.

/*******************************************************************************
 * Hook Functions (Drupal)
 ******************************************************************************/
 
function er_init(){
	// This is a new comment.
	// This is a more accurate comment.
	// Uncomment out the below two lines to get error reporting in case of WSOD ~Mike
	// error_reporting(E_ALL | E_STRICT);
	// the line below will get rid of benign "notice" messages that do not look good during a demo
	error_reporting(E_ALL & ~E_NOTICE);
	ini_set("display_errors", 1);	
	$start_date = variable_get('er_start_date');
	//drupal_add_js('var jQueryOriginal = jQuery;','inline'); //keeps a reference to the original version of jquery.
	//drupal_add_js(ER_MODULE_DIR.'/static/js/jquery-1.8.0.min.js'); //brings in the new version...
	//drupal_add_js('var jQueryNew = jQuery.noConflict(), jQuery = jQueryOriginal;', 'inline'); //sets up jQueryNew, and restores the jQuery variable to the old version.
	drupal_add_js(array('er'=>array('start_date'=>mktime(0, 0, 0, $start_date['month'], $start_date['day'], $start_date['year']))), 'setting'); //tells javascript about the start date of the grant.
	drupal_add_js(ER_MODULE_DIR.'/static/js/custom.js'); 
	drupal_add_css(ER_MODULE_DIR.'/static/css/er.css'); //adds some module specific themeing...
	drupal_add_css(ER_MODULE_DIR.'/static/css/sprites.css'); //adds in cool little icons
  
	//dsm(memory_get_usage(true));
  // print 'Memory usage: ' . (memory_get_usage(true)/1048576) . 'MB (this is a debug message, see er.module:47)';
}

/**
 * Display help and module information
 * @param path which path of the site we're displaying help
 * @param arg array that holds the current path as would be returned from arg() function
 * @return help text for the path
 */
function er_help($path, $arg) {
	//This is a different comment.
	// this hooks into the documentation for ER Core
	//$output = '<p>'.	t("er is a simple module to test functions and pages in Drupal");
	//	The line above outputs in ALL admin/module pages
	$output = '';
  switch ($path) {
    case 'admin/modules#name':
      $output .= t('EPSCoR Reporting');
      break;
    case 'admin/modules#description':
    case 'admin/help#er':
      $output .= theme('er_help');
      break;
  }
	return $output;
} // function er_help

/**
 * Valid permissions for this module
 * @return array An array of valid permissions for the er module
 */
function er_permission(){
	return array(
		ER_ADMIN_PERMISSION=>array(
			'title' => t('Administer EPSCoR Module')
		),
		ER_ACCESS_PERMISSION=>array(
			'title' => t('Access EPSCoR Module content')
		),
		ER_DOWNLOAD_PERMISSION=>array(
			'title' => t('Access EPSCoR Module excel sheets')
		),
	);
} // function er_perm()

//function er_menu_link_alter(&$item) {
//	d($item, '$item');
//}

/**
 * Menu for this module
 * @return array An array with this module's settings.
 */
function er_menu() {
// this is where we hardcode the EPSCoR menu system
	$items = array();
	//This sets up the EPSCoR Menu in the administration bar.
	$items['admin/epscor'] = array(
		'menu_name' => 'management',
		'title' => 'EPSCoR',
		'description' => 'EPSCoR Reporting',
		'page callback' => 'system_admin_menu_block_page',
		'access arguments' => array('access administration pages'),
		'file' => 'system.admin.inc',
		'file path' => drupal_get_path('module', 'system'),
		'weight' => '-49',
	);
	$items['admin/epscor/views'] = array(
		'menu_name' => 'management',
		'title' => 'Admin Views',
		'description' => 'Administrative views',
		'page callback' => 'system_admin_menu_block_page',
		'access arguments' => array('access administration pages'),
		'file' => 'system.admin.inc',
		'file path' => drupal_get_path('module', 'system'),
	);
	
	//use drupal_goto to hard code urls...
	$items['admin/epscor/config'] = array(
    'menu_name' => 'management',
    'title' => 'EPSCoR Reporting Module Settings',
		'type' => MENU_NORMAL_ITEM,
		'page callback' => 'drupal_goto',
		'page arguments' => array('admin/config/epscor/er'),
    'access arguments' => array(ER_ADMIN_PERMISSION),
  );
	$items['admin/epscor/new-inst'] = array(
    'menu_name' => 'management',
    'title' => 'Create New Institution',
		'type' => MENU_NORMAL_ITEM,
		'page callback' => 'drupal_goto',
		'page arguments' => array('node/add/er-institution'),
    'access arguments' => array(ER_ADMIN_PERMISSION),
  );
	$items['admin/epscor/new-user'] = array(
    'menu_name' => 'management',
    'title' => 'Quick Add New User',
		'type' => MENU_NORMAL_ITEM,
		'page callback' => 'drupal_goto',
		'page arguments' => array('admin/people/create'),
    'access arguments' => array(ER_ADMIN_PERMISSION),
  );
	$items['admin/epscor/reporting'] = array(
    'menu_name' => 'management',
    'title' => 'EPSCoR Accomplishments',
		'type' => MENU_NORMAL_ITEM,
		'page callback' => 'drupal_goto',
		'page arguments' => array('reporting'),
    'access arguments' => array(ER_ADMIN_PERMISSION),
  );
	$items['admin/epscor/rules'] = array(
    'menu_name' => 'management',
    'title' => 'Notifications',
    'description' => 'Notifications are handled by the Rules module.',
		'type' => MENU_NORMAL_ITEM,
		'page callback' => 'drupal_goto',
		'page arguments' => array('admin/config/workflow/rules'),
    'access arguments' => array(ER_ADMIN_PERMISSION),
  );
	//admin/epscor/views/
	
	// Set up the settings page located under Configuration.
	$items['admin/config/epscor'] = array(
		'title' => 'EPSCoR',
		'description' => 'EPSCoR Reporting',
		'page callback' => 'system_admin_menu_block_page',
		'access arguments' => array('access administration pages'),
		'file' => 'system.admin.inc',
		'file path' => drupal_get_path('module', 'system'),
	);
	
	$items['admin/config/epscor/er'] = array(
		'title' => 'EPSCoR Reporting Module Settings',
		'description' => 'Settings which affect the functionality of the EPSCoR Reporting module.',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('er_settings'),
		'access arguments' => array(ER_ADMIN_PERMISSION),
		'file' => 'includes/er.admin.inc',
		'type' => MENU_NORMAL_ITEM,
	);
	
	$items['admin/config/epscor/er/status'] = array(
		'title' => 'EPSCoR Reporting Status Report',
		'description' => 'This will help verify if the ER Core installed correctly.',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('er_testing'),
		'access arguments' => array(ER_ADMIN_PERMISSION),
		'file' => 'includes/er.testing.inc',
		'type' => MENU_NORMAL_ITEM,
	);
	
	$items['admin/config/epscor/er/reset/%'] = array(
		'title' => 'Reset part of er-core',
		'description' => '',
		'page callback' => 'er_installer_reset_callback',
		'page arguments' => array(5, 6),
		'access arguments' => array(ER_ADMIN_PERMISSION),
		'file' => 'includes/er.install.inc',
	);

	// This is the page for the overview. We only need one menu entry for this
	// because the choice of whether to view it in reporting year or calendar
	// year is just a view option, and does not need its own path. We can't
	// use the load arguments for this one, because there is no second item in
	// the path.
	$items[ER_ROOT_NAME] = array(
		'title' => 'Accomplishments',
		'description' => 'Overview of reporting data',
		'page callback' => 'er_accomplishments',
		//'page arguments' => array('summary'),
		'access arguments' => array(ER_ACCESS_PERMISSION),
		'type' => MENU_NORMAL_ITEM,
		'menu_name' => 'main-menu',
	);

	// For the individual pages we do not want to have to define a menu item for
	// each one, so we can use a wildcard loader argument (the % item). This will
	// call the function er_page_load() with the argument passed in via the URL.
	// So if someone enters the url reporting/collaborations, then Drupal will call
	// er_page_load("collaborations"). If that returns false, the response will
	// be 404 not found. If it returns a value (in this case our page class) that
	// will be passed to our page function.
	$items[ER_ROOT_NAME.'/%'] = array(
		'title' => 'View Details',
		'description' => 'View reporting details',
		'page callback' => 'er_page',
		'page arguments' => array(1),
		'access arguments' => array(ER_ACCESS_PERMISSION),
		'type' => MENU_CALLBACK,
	);

	// We also want a download entry for each item, in case we want to allow
	// certain users to see the summaries, but not to download the excel product.
	$items[ER_ROOT_NAME.'/%/download'] = array(
		'title' => 'Download Details',
		'description' => 'Download reporting details.',
		'page callback' => 'er_page_download',
		'page arguments' => array(1),
		'access arguments' => array(ER_DOWNLOAD_PERMISSION),
		'type' => MENU_CALLBACK,
	);
	
	$items['admin/help/er/feedback'] = array(
		'title' => 'User Feedback',
		'description' => 'Provide feedback on the user interface',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('er_feedback_form'),
		'access arguments' => array(ER_ACCESS_PERMISSION),//maybe different permission for this.
		'file' => 'includes/er.feedback.inc',
		'type' => MENU_NORMAL_ITEM,
	);
	return $items;
}

//This hook replaces the original node/add page with one that separates the different types of content.
//See also er/templates/er-content-links.tpl.php, and er/includes/theme.inc
//Changes in this function require that you flush the menu cache.
function er_menu_alter(&$items) {
	$items['node/add']['page callback'] = 'theme';
	$items['node/add']['page arguments'] = array('er_add_core_content', array('full_view'=>true));
}

//initializes, then returns an instance of a er_page object which will be defined in an "inc" file ex: /modules/er/pages/_____.inc
function er_load_page($arg){
	require_once ER_MODULE_DIR.'/er_page.inc';
	if (module_load_include('inc', 'er', 'pages/'.$arg)!==false){
		// Remember that our classes are prefixed with er_
		$class = 'er_' . str_replace( "-" , "_" , $arg);
		$class = new $class();
		return $class;
	}
	return false;
}

//this handles page loading, it uses er_load_page to retrieve the page object which is used to display the page.
function er_page($arg) {
	//dsm($arg, 'loading page');
	if($page = er_load_page($arg)){
		// Set the title of the page. the drupal_set_title function takes care
		// of letting the theme know what to put in the TITLE and H1 tags.
		drupal_set_title($page->title());
	
		// Return the HTML content of the page
		return $page->html();
	}
	return drupal_not_found();
}

//menu hook which procs when trying to download certain excel sheets, ex: /reporting/participants/download
function er_page_download($arg) {
	if (($library = libraries_detect('PHPExcel')) && !empty($library['installed']) && libraries_load_files($library)) {// The library is installed, and files are loaded.
		if($page = er_load_page($arg)){
			$objPHPExcel = $page->excel();
			$objPHPExcel->setActiveSheetIndex(0); //initialize to the first page...
			$objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel5');
			//comment these next few blocks if you want to debug the excel system... (shows error messeges)
			if (!ER_DEBUG_EXCEL){
				header('Content-Type: application/vnd.ms-excel');
				header('Content-Disposition: attachment;filename="'.$page->title().'.xls"');
				header('Cache-Control: max-age=0');
				$objWriter->save('php://output');
				module_invoke_all('exit');
				exit;
			}
			return '';
		}
	}else {//Libraries had a problem loading PHPExcel...
		$error = $library['error'];// This contains a short status code of what went wrong, such as 'not found'.
		$error_message = $library['error message'];// This contains a detailed (localized) error message.
		drupal_set_message('PHPExcel library error: ' . $error_message, 'error');
		watchdog('er', $error_message, NULL, WATCHDOG_CRITICAL);
	}
	return drupal_not_found();
}

/* 
* Implements hook_ctools_plugin_directory -
* This lets ctools know to scan my module for a content_type plugin file
* Detailed docks in ctools/ctools.api.php 
* See also: http://drupalcontrib.org/api/drupal/contributions--ctools--ctools.api.php/function/hook_ctools_plugin_directory/6
*/ 
function er_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' || $module == 'panels' || $module == 'entityreference') {
    return 'plugins/' . $plugin;
  }
}

///**
// * Implements hook_ctools_plugin_type().
// */
//function er_ctools_plugin_type() {
//  $plugins['selection'] = array(
//    'classes' => array('class'),
//  );
//  //$plugins['behavior'] = array(
//  //  'classes' => array('class'),
//  //  'process' => 'entityreference_behavior_plugin_process',
//  //);
//  return $plugins;
//}

/**
 * Implements hook_ctools_plugin_api().
 */
function er_ctools_plugin_api($module, $api) {
  if ($module == 'panels' && $api == 'styles') {
    // Check and return correct style version
    return array('version' => 2);
  }
}

/**
 * Implements hook_views_api().
 */
function er_views_api() {
  return array("version" => "3.0");
}

//hook_libraries_info()
//from libraries module
function er_libraries_info(){
	return array(
		"PHPExcel"=>array(
			"name"=>"PHPExcel",
			"vendor url"=>"http://phpexcel.codeplex.com/",
			"download url"=>"http://phpexcel.codeplex.com/",
			"files"=>array(
				"php"=>array('PHPExcel.php', 'PHPExcel/IOFactory.php')
			),
			"version arguments"=>array(
				"file"=>'PHPExcel.php',
				"lines"=>30,
				"pattern"=>'/@version\s+([0-9a-zA-Z\.-]+)/',
			)
		)
	);
}

//helper function which attempts to find a value inside of an object or associative array, and returns a default value if nothing was found.
function get($obj, $thing, $default=FALSE){
	switch (gettype($obj)){
		case 'array':
			return isset($obj[$thing])?$obj[$thing]:$default;
		case 'object':
			return isset($obj->{$thing})?$obj->{$thing}:$default;
		default:
			return $default;
	}
}

function er_username_alter(&$name, $account) {
  if (empty($account->uid)) {
    // Don't alter anonymous users or objects that do not have any user ID.
    return;
  }

  // Real name was loaded/generated via hook_user_load(), so re-use it.
  if (isset($account->field_er_realname['und'][0]['value'])) {
    if (drupal_strlen($account->field_er_realname['und'][0]['value'])) {
      // Only if the real name is a non-empty string is $name actually altered.
      $name = $account->field_er_realname['und'][0]['value'];
    }
    return;
  }
}

/*
 * Purpose: to detect any calls to d() "debug" function.
 * 			If the Devel module is installed, the function dsm() is called
 * 			This function ensures we do not receive fatal errors when moving dev code to the live site
 * Category: Troubleshooting
 */ 
function d($first, $second = ''){
  global $user;
  if (function_exists('dpm'))
	dpm($first, $second);
}

/*
 * This function returns an array of all the machine names of the content types that use $fieldname
 * 		where $fieldname is the machine name of the field.
 * The $suffix variable is if you want to add a suffix to the end. For instance '_node_form'
 */
function list_cts_having_field($fieldname, $suffix = ''){
	$ret = array();
	$result = db_query("SELECT bundle FROM {field_config_instance} WHERE field_name = :entity", array(
	  ':entity' => $fieldname,
	));
	// d($result, 'result');
	foreach ($result as $k) {
		$ret[] = $k->bundle . $suffix;
		// d($k, 'k');
	}
	return $ret;	
}

/*
 * Generates a nested array of date ranges corresponding to the start and end of a valid reporting period.
 * This is used primarily on the summary table.
 */
function er_get_reporting_ranges($everything = false){
	static $ranges = array();
	if (!$everything && $range = er_get_reporting_range()){
		return array($range);
	}else if(!count($ranges)){//only need to do this once.
		//provide the default ranges
		//this code takes the start date provided in er.module file, and creates an array of date ranges.
		//it is assumed that the reporting periods start with whatever month the grant was awarded on.
		$start_date = variable_get('er_start_date');
		//dsm(mktime(0, 0, 0, $start_date['month'], $start_date['day'], $start_date['year']));
		$cur_month = date('n');
		$start_month = $start_date['month'];
		$adjusted_date = mktime(0, 0, 0, $cur_month-$start_month+7);//+half a year into the future (6) +1 offset
		//$adjusted_date = mktime(0, 0, 0, $cur_month+6);
		$cur_year = date('Y', $adjusted_date);
		$start_year = $start_date['year'];
		for ($y = $cur_year; $y>=$start_year;$y--){
			if ($y == $start_year)
				$ranges[] = Array(mktime(0, 0, 0, $start_date['month'], $start_date['day'], $start_date['year']), mktime(0, 0, 0, $start_month, 0, $y+1));
			else
				$ranges[] = Array(mktime(0, 0, 0, $start_month, 1, $y), mktime(0, 0, 0, $start_month, 0, $y+1));
			//self::$ranges[] = Array(($y-1)."-09-00", $y."-08-31");
		}
	}
	return $ranges;
}

/*
 * Generates a nested array of date ranges corresponding to the start and end of a valid reporting period.
 * This is used primarily on the summary table.
 * The date values get set via the form seen on the summary table.
 */
function er_get_reporting_range(){
	drupal_session_start();
	if (array_key_exists('er_start_date', $_SESSION) && array_key_exists('er_end_date', $_SESSION)){
		return array($_SESSION['er_start_date'], $_SESSION['er_end_date']);
	}else
		return false;
}

/*
 * This helper function creates a download hyperlink themed with our little download icon, this is used in er_page.inc.
 * Broke this out of er_page class because it's now also being used in theme.inc.
 */
function er_create_download_link($label = "", $arg = "", $options = array()){
	$options += array(
		'html'=>true,
		'attributes' => array('title' => 'Download','class' => 'downloadButton')
	);
	if (!$arg) $arg = arg(1);
	if (!$label) $label = "Download this page";
	return l('<i class="icon-download-alt"></i>'.t($label), ER_ROOT_NAME."/$arg/download", $options);
}